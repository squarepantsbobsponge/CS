# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rpc import pubsub_pb2 as rpc_dot_pubsub__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rpc/pubsub_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SubServiceStub(object):
    """类
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_unary(
                '/SubService/Subscribe',
                request_serializer=rpc_dot_pubsub__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=rpc_dot_pubsub__pb2.SubscribeResponse.FromString,
                _registered_method=True)
        self.Message_Stream = channel.unary_stream(
                '/SubService/Message_Stream',
                request_serializer=rpc_dot_pubsub__pb2.request_id.SerializeToString,
                response_deserializer=rpc_dot_pubsub__pb2.topic_Message.FromString,
                _registered_method=True)


class SubServiceServicer(object):
    """类
    """

    def Subscribe(self, request, context):
        """订阅主题的rpc方法：客户端发起订阅请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Message_Stream(self, request, context):
        """流式推送消息：客户端订阅成功后，发出空的请求，服务器将主题内消息推送,是Message的信息流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=rpc_dot_pubsub__pb2.SubscribeRequest.FromString,
                    response_serializer=rpc_dot_pubsub__pb2.SubscribeResponse.SerializeToString,
            ),
            'Message_Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.Message_Stream,
                    request_deserializer=rpc_dot_pubsub__pb2.request_id.FromString,
                    response_serializer=rpc_dot_pubsub__pb2.topic_Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SubService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('SubService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SubService(object):
    """类
    """

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SubService/Subscribe',
            rpc_dot_pubsub__pb2.SubscribeRequest.SerializeToString,
            rpc_dot_pubsub__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Message_Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/SubService/Message_Stream',
            rpc_dot_pubsub__pb2.request_id.SerializeToString,
            rpc_dot_pubsub__pb2.topic_Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
